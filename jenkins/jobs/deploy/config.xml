<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@1145.v7f2433caa07f">
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties/>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2648.va9433432b33c">
    <script>pipeline {
  environment {
    registry = &apos;lqss/jenkins&apos;
    registryCredential = &apos;dockerHub&apos;
    dockerImage = &apos;&apos;
  }
  agent any
  stages {
    stage(&apos;Mail Notification&apos;) {
      steps {
        echo &apos;Sending Mail&apos;
        mail bcc: &apos;&apos;,
        body: &apos;Jenkins Build Started&apos;,
        cc: &apos;&apos;,
        from: &apos;&apos;,
        replyTo: &apos;&apos;,
        subject: &apos;Jenkins Job&apos;,
        to: &apos;example@domain.com&apos;
      }
    }
    stage(&apos;Git&apos;) {
      steps {
        echo &apos;Cloning&apos;
        git branch: &apos;spring-for-jenkins-with-docker&apos;, url: &apos;https://github.com/LQss11/devops-pipeline.git&apos;
      }
    }
    stage(&apos;MVN CLEAN&apos;) {
      steps {
        echo &apos;Maven Clean&apos;
        sh &apos;mvn clean&apos;
      }
    }
    stage(&apos;MVN TEST JUNIT&apos;) {
      steps {
        echo &apos;Maven Test JUnit&apos;
        sh &apos;mvn test&apos;
      }
    }
    stage(&apos;MVN TEST SONAR&apos;) {
      steps {
        echo &apos;Sonar Test Code Quality&apos;
        sh &apos;mvn sonar:sonar -Dsonar.host.url=http://sonarqube:9000&apos;
      }
    }
    stage(&apos;MVN PACKAGE&apos;) {
      steps {
        echo &apos;Maven Packaging&apos;
        sh &apos;mvn package -Dmaven.test.skip=true&apos;
      }
    }
    stage(&apos;NEXUS&apos;) {
      steps {
        echo &apos;Nexus Packaging&apos;
        sh &apos;mvn clean package -Dmaven.test.skip=true deploy:deploy-file -DgroupId=tn.esprit.spring -DartifactId=timesheet-devops -Dversion=1.0 -DgeneratePom=true -Dpackaging=jar  -DrepositoryId=sonartypeNexusRepo -Durl=http://nexus3:8081/repository/maven-releases/ -Dfile=target/timesheet-devops-1.0.jar&apos;
      }
    }
    stage(&apos;Building our image&apos;) {
      steps {
        script {
          dockerImage = docker.build registry + &quot;:$BUILD_NUMBER&quot;
        }
      }
    }
    stage(&apos;Deploy image to Docker Hub&apos;) {
      steps {
        script {
          docker.withRegistry(&apos;&apos;, registryCredential) {
            dockerImage.push()
          }
        }
      }
    }
    stage(&apos;Cleaning up Docker Image&apos;) {
      steps {
        sh &quot;docker rmi $registry:$BUILD_NUMBER&quot;
      }
    }
  }
      post {
        success {
        echo &apos;whole pipeline successful&apos;
        mail bcc: &apos;&apos;,
        body: &quot;Project with name ${env.JOB_NAME}, with Build Number: ${env.BUILD_NUMBER}, was built successfully. to check the build result go to build URL: ${env.BUILD_URL}&quot;,
        cc: &apos;&apos;,
        from: &apos;&apos;,
        replyTo: &apos;&apos;,
        subject: &apos;Build success&apos;,
        to: &apos;example@domain.com&apos;
        }
        failure {
        echo &apos;pipeline failed, at least one step failed&apos;
        mail bcc: &apos;&apos;,
        body: &quot;there was an error in  ${env.JOB_NAME}, with Build Number: ${env.BUILD_NUMBER} to check the error go to build URL: ${env.BUILD_URL}&quot;,
        cc: &apos;&apos;,
        from: &apos;&apos;,
        replyTo: &apos;&apos;,
        subject: &apos;Build Failure&apos;,
        to: &apos;example@domain.com&apos;
        }
      }
}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>