# Validate docker-compose stack
name: Kind-Cluster-CI-CD

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        
      # Runs a single command using the runners shell
      - name: Starting docker compose stack
        run: docker-compose up --build -d

      # Check for jenkins and docker dind containers
      - name: Check running containers (Jenkins + docker dind)
        run: docker ps -a  

      # Create cluster
      - name: Create kind cluster with 1 control-plane nodes and 1 worker nodes
        run: docker exec -i kind-cluster sh -c "chmod +x ./content/scripts/cluster-setup.sh && echo -e '1\n1' | ./content/scripts/cluster-setup.sh"
      
      # Validate cluster nodes
      - name: Get cluster nodes
        run: sleep 10 ; docker exec -i kind-cluster kubectl get nodes
      
      # Pull image and apply deployment
      - name: Pull and apply deployments
        # Could use kind load docker-image nginx:1 --name k8s-cluster to download image to avoid timout error
        # Also could use kubectl wait --for=condition=ready pod -l app=appname --timeout=30s
        run: docker exec -i kind-cluster sh -c "chmod +x ./content/scripts/deploy.sh && ./content/scripts/deploy.sh"
      
      # Check k8s resources
      - name: Get k8s resources
        run: docker exec -i kind-cluster kubectl get all
      
      # Delete deployment resources
      - name: Delete deployed resources
        run: docker exec -i kind-cluster kubectl delete -f ./content/deployments/

      # Delete cluster
      - name: Delete kind cluster nodes
        run: docker exec -i kind-cluster kind delete cluster --name k8s-cluster       

      # Stop docker compose stack
      - name: Delete kind cluster nodes
        run: docker-compose down   